// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workload.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Workload struct {
	Yaml                 string   `protobuf:"bytes,1,opt,name=Yaml,proto3" json:"Yaml,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Workload) Reset()         { *m = Workload{} }
func (m *Workload) String() string { return proto.CompactTextString(m) }
func (*Workload) ProtoMessage()    {}
func (*Workload) Descriptor() ([]byte, []int) {
	return fileDescriptor_611edb31abe0f206, []int{0}
}

func (m *Workload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workload.Unmarshal(m, b)
}
func (m *Workload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workload.Marshal(b, m, deterministic)
}
func (m *Workload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workload.Merge(m, src)
}
func (m *Workload) XXX_Size() int {
	return xxx_messageInfo_Workload.Size(m)
}
func (m *Workload) XXX_DiscardUnknown() {
	xxx_messageInfo_Workload.DiscardUnknown(m)
}

var xxx_messageInfo_Workload proto.InternalMessageInfo

func (m *Workload) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

type WorkloadSubmitted struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadSubmitted) Reset()         { *m = WorkloadSubmitted{} }
func (m *WorkloadSubmitted) String() string { return proto.CompactTextString(m) }
func (*WorkloadSubmitted) ProtoMessage()    {}
func (*WorkloadSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_611edb31abe0f206, []int{1}
}

func (m *WorkloadSubmitted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkloadSubmitted.Unmarshal(m, b)
}
func (m *WorkloadSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkloadSubmitted.Marshal(b, m, deterministic)
}
func (m *WorkloadSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadSubmitted.Merge(m, src)
}
func (m *WorkloadSubmitted) XXX_Size() int {
	return xxx_messageInfo_WorkloadSubmitted.Size(m)
}
func (m *WorkloadSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadSubmitted proto.InternalMessageInfo

func (m *WorkloadSubmitted) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Workload)(nil), "api.Workload")
	proto.RegisterType((*WorkloadSubmitted)(nil), "api.WorkloadSubmitted")
}

func init() { proto.RegisterFile("workload.proto", fileDescriptor_611edb31abe0f206) }

var fileDescriptor_611edb31abe0f206 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcf, 0x2f, 0xca,
	0xce, 0xc9, 0x4f, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54,
	0x92, 0xe3, 0xe2, 0x08, 0x87, 0x0a, 0x0b, 0x09, 0x71, 0xb1, 0x44, 0x26, 0xe6, 0xe6, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xba, 0x5c, 0x82, 0x30, 0xf9, 0xe0, 0xd2, 0xa4,
	0xdc, 0xcc, 0x92, 0x92, 0xd4, 0x14, 0x21, 0x09, 0x2e, 0xf6, 0xe0, 0xd2, 0xe4, 0xe4, 0xd4, 0xe2,
	0x62, 0xb0, 0x5a, 0x8e, 0x20, 0x18, 0xd7, 0xc8, 0x9d, 0x8b, 0x1b, 0xa6, 0xdc, 0xb1, 0x20, 0x53,
	0xc8, 0x82, 0x8b, 0x17, 0xc1, 0x2d, 0xc8, 0xa9, 0x14, 0xe2, 0xd5, 0x4b, 0x2c, 0xc8, 0xd4, 0x83,
	0x89, 0x49, 0x89, 0xa1, 0x70, 0xe1, 0x16, 0x28, 0x31, 0x24, 0xb1, 0x81, 0xdd, 0x68, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x7d, 0xc5, 0x2e, 0x14, 0xb5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkloadApiClient is the client API for WorkloadApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkloadApiClient interface {
	WorkloadApply(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*WorkloadSubmitted, error)
}

type workloadApiClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadApiClient(cc *grpc.ClientConn) WorkloadApiClient {
	return &workloadApiClient{cc}
}

func (c *workloadApiClient) WorkloadApply(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*WorkloadSubmitted, error) {
	out := new(WorkloadSubmitted)
	err := c.cc.Invoke(ctx, "/api.WorkloadApi/WorkloadApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadApiServer is the server API for WorkloadApi service.
type WorkloadApiServer interface {
	WorkloadApply(context.Context, *Workload) (*WorkloadSubmitted, error)
}

func RegisterWorkloadApiServer(s *grpc.Server, srv WorkloadApiServer) {
	s.RegisterService(&_WorkloadApi_serviceDesc, srv)
}

func _WorkloadApi_WorkloadApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadApiServer).WorkloadApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkloadApi/WorkloadApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadApiServer).WorkloadApply(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkloadApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.WorkloadApi",
	HandlerType: (*WorkloadApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkloadApply",
			Handler:    _WorkloadApi_WorkloadApply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workload.proto",
}
